from telebot import TeleBot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, Message
from dotenv import load_dotenv
from os import getenv
from pathlib import Path

from src.adapters.repos.event_repo import EventRepo
from src.domain.event import EventTypes
from src.domain.errors import DuplicateValueError
from src.adapters.repos.user_repo import UserRepo
from src.constants import months_translate, event_translate

load_dotenv()
ID_MAIN_ADMIN = getenv("ID_MAIN_ADMIN")

file_path_to_data = Path(__file__).parent.parent.parent / 'data'


class TelegramBot:
    def __init__(self, TOKEN: str):
        self.bot = TeleBot(TOKEN)
        self.event_repo = EventRepo(file_path=file_path_to_data / 'events.json')
        self.events = self.event_repo.load()
        self.setup_handlers()

    def setup_handlers(self):
        self.bot.message_handler(commands=['start'])(self.start_command)
        self.bot.message_handler(commands=['help'])(self.help_command)
        self.bot.message_handler(commands=['events'])(self.events_command)
        self.bot.callback_query_handler(
            func=lambda call: call.data in (EventTypes.Movie, EventTypes.Concert, EventTypes.Performance))(
            self.show_events)
        self.bot.callback_query_handler(func=lambda call: "event" in call.data)(self.show_info_about_event)
        self.bot.message_handler(commands=['admin'])(self.admin_command)
        self.bot.callback_query_handler(func=lambda call: call.data.split()[0] in ("yes", "no"))(self.add_to_admins)

    def check_user_in_list(self, user_id: int, chat_id: int, list_save: str) -> bool:
        user_repo = UserRepo(user_id, file_path_to_data / 'users.json')
        if user_repo.id_in_db(list_save):
            self.bot.send_message(
                chat_id=chat_id,
                text="*üö´ –í—ã –≤ –±–∞–Ω –ª–∏—Å—Ç–µ!*",
                parse_mode="Markdown"
            )
            return True

    def start_command(self, message: Message):
        if self.check_user_in_list(message.from_user.id, message.chat.id, "bans"):
            return None
        start_message = (
            "<b>üåü –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å –≤ –º–æ—ë–º —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ, –ø–æ—Å–≤—è—â–µ–Ω–Ω–æ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å–æ–±—ã—Ç–∏—è–º –≤ –≥–æ—Ä–æ–¥–µ!\n\n"
            "üì± –°—Å—ã–ª–∫–∏ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ –ø—Ä–æ–µ–∫—Ç:\n"
            "¬∑ GitHub: <a href='https://github.com/DjMix22'>DjMix22</a>\n"
            "¬∑ GitHub –ø—Ä–æ–µ–∫—Ç–∞: <i><u>–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∑–∞–∫—Ä—ã—Ç</u> (–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)</i>\n"
            "¬∑ Telegram: @DjMix22\n"
            "¬∑ Telegram –∫–∞–Ω–∞–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏: @events_in_focus\n\n"
            "üìú–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help.\n\n"
            "–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –≥–æ—Ä–æ–¥–µ —Å –Ω–∞—à–∏–º —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–æ–º!</b>"
        )
        self.bot.send_message(
            chat_id=message.chat.id,
            text=start_message,
            parse_mode="HTML"
        )

    def help_command(self, message: Message):
        if self.check_user_in_list(message.from_user.id, message.chat.id, "bans"):
            return None
        help_message = (
            "*üéâ–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /events, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –Ω–∞ –ø–æ—Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é!\n"
            "üöÄ–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /admin, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º!*"
        )
        self.bot.send_message(
            chat_id=message.chat.id,
            text=help_message,
            parse_mode="Markdown"
        )

    def events_command(self, message: Message):
        if self.check_user_in_list(message.from_user.id, message.chat.id, "bans"):
            return None
        markup = InlineKeyboardMarkup()
        event_types = {
            "üé¨ –§–∏–ª—å–º—ã": EventTypes.Movie,
            "üé§ –ö–æ–Ω—Ü–µ—Ä—Ç—ã": EventTypes.Concert,
            "üé´ –í—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è": EventTypes.Performance
        }

        for event_type, event_type_obj in event_types.items():
            markup.add(InlineKeyboardButton(
                text=event_type,
                callback_data=event_type_obj
            ))

        self.bot.send_message(
            chat_id=message.chat.id,
            text="*üì∫ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è:*",
            reply_markup=markup,
            parse_mode="Markdown"
        )

    def show_events(self, call: CallbackQuery):
        markup = InlineKeyboardMarkup()

        selected_events = [event for event in self.events if event.event_type == call.data]

        for event in selected_events:
            markup.add(InlineKeyboardButton(
                text=f"{event.name}",
                callback_data=f"event_{event.id}"
            ))

        self.bot.send_message(
            chat_id=call.message.chat.id,
            text=f"*{event_translate[call.data]} –Ω–∞ –ø–æ—Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é:*",
            reply_markup=markup,
            parse_mode="Markdown"
        )

    def show_info_about_event(self, call: CallbackQuery):
        event_id = int(call.data.split('_')[1])

        current_event = next(event for event in self.events if event.id == event_id)

        time_slots = "\n".join(
            f"- üï∞Ô∏è {time_slot.start_date.strftime('%d')} {months_translate[time_slot.start_date.strftime('%B')]} "
            f"{time_slot.start_date.strftime('%H:%M')}, —Ü–µ–Ω–∞: {time_slot.price}, –º–µ—Å—Ç–æ: {time_slot.place}"
            for time_slot in current_event.time_slots
        )

        message = (
            f"*üåü {current_event.name}\n\n"
            f"üé© –ñ–∞–Ω—Ä: {current_event.genre}\n"
            f"üåê –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ:* {current_event.url}*\n\n"
            f"üóìÔ∏è –í–æ–∑–º–æ–∂–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø–∏—Å—å:\n"
            f"{time_slots}*"
        )

        self.bot.send_message(
            chat_id=call.message.chat.id,
            text=message,
            parse_mode="Markdown"
        )

    def admin_command(self, message: Message):
        if self.check_user_in_list(message.from_user.id, message.chat.id, "bans"):
            return None
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(
            text="‚úÖ",
            callback_data=f"yes {message.chat.id}"
        ))
        markup.add(InlineKeyboardButton(
            text="‚ùå",
            callback_data=f"no {message.chat.id}"
        ))
        self.bot.send_message(
            chat_id=ID_MAIN_ADMIN,
            text=f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º {message.from_user.first_name}, id:* `{message.from_user.id}`* "
                 f"—Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω—ã.\n–ü—Ä–∏–Ω—è—Ç—å –µ–≥–æ –≤ –∞–¥–º–∏–Ω—ã:*",
            parse_mode="Markdown",
            reply_markup=markup
        )

    def add_to_admins(self, call: CallbackQuery):
        data = call.data.split()
        success, user_id = data[0], int(data[1])

        if success == "yes":
            try:
                user_repo = UserRepo(user_id, file_path_to_data / 'users.json')
                user_repo.save("admins")

                text_to_main_admin = f"*–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –∞–¥–º–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id:* `{user_id}`*!*"
                text_to_user = "*–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏—Å—å –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!*"

            except DuplicateValueError:
                text_to_main_admin = f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id:* `{user_id}` *—É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!*"
                text_to_user = "*–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!*"

        else:
            text_to_main_admin = f"*–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –∞–¥–º–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id:* `{user_id}`*!*"
            text_to_user = "*–í–∞—Å –æ—Ç–∫–∞–∑–∞–ª–∏ –≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!*"

        self.bot.send_message(
            chat_id=ID_MAIN_ADMIN,
            text=text_to_main_admin,
            parse_mode="Markdown"
        )
        self.bot.send_message(
            chat_id=user_id,
            text=text_to_user,
            parse_mode="Markdown"
        )

    def run_bot(self):
        self.bot.polling()

    def stop_bot(self):
        self.bot.stop_polling()
